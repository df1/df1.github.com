<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | Orokana Pekoponjin]]></title>
  <link href="http://df1.github.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://df1.github.com/"/>
  <updated>2013-04-17T01:53:28+08:00</updated>
  <id>http://df1.github.com/</id>
  <author>
    <name><![CDATA[df1]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.JS Hsinchu Party 2012/06/30]]></title>
    <link href="http://df1.github.com/blog/2012/07/01/node-js-hsinchu-group-meetup-2012-06-30/"/>
    <updated>2012-07-01T20:50:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/07/01/node-js-hsinchu-group-meetup-2012-06-30</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/zFjtc.png" alt="" /></p>

<p>這次Node.JS Hsinchu Party，除了有<a href="http://blog.jackbean.tw">JackBean</a>提供的免費場地、Nausca大大熱情贊助的飲料外，
還有大家期待已久的、一樣是由<a href="http://storiii.com/">storiii</a>的Yusen大大來分享的兩個主題：<a href="https://github.com/visionmedia/ejs#readme">EJS</a>與<a href="http://en.wikipedia.org/wiki/Y_Combinator#Y_combinator">Y-combinator</a>。</p>

<!--more-->


<h2><a href="https://github.com/visionmedia/ejs#readme">EJS</a></h2>

<p><a href="https://github.com/visionmedia/ejs#readme">EJS</a>是一個以JavaScript實作的Template Engine，基本用法跟ASP、JSP的tag library很類似：</p>

<pre><code>&lt;% if(user.name) {%&gt;
    &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;
&lt;% } %&gt;
</code></pre>

<p>它可以直接在NODE以<a href="http://npmjs.org/">NPM</a>安裝使用（可以完美配合<a href="http://expressjs.com/">express.js</a>），也可以在broswer端呼叫使用。
基本的介紹其實到這邊就講完了（咦!?）</p>

<h3>Use case</h3>

<p>EJS看似一個簡單的工具，要如何把它用到出神入化的境界呢？
講者舉了像iPad上flipboard上可依內容做出的動態排版為例，
提到了「設計師心目中的排版」與「工程師心目中的排版」觀念上的落差。</p>

<p>若只討論單純的切割畫面，可以是一種程式先決的過程；
而設計先決，是請設計師先決定怎樣叫好看的方塊：例如設計出大塊/中塊/小塊三種不同的方塊外觀，
對應到重要性或關聯性為高、中、低的文章，
然後再設計填充畫面的演算法。在範例中，講者將整個畫面切成grid，
對應到程式上的二維陣列，再請設計師用小格子去排，
把排版問題轉換成排積木問題：laout problem -> packing problem。
最後，計算造成多少破洞，找出第一個符合標準的排版組合，進行layout。</p>

<!--
慧眼挑金eat people
cinder: C++做到JS的感覺
-->


<h2>Y Combinator</h2>

<p>第二個主題是大家耳熟能詳的Y-combinator。
但要講的不是那間國外有名的創投，而是那個傳說中的functional programming技巧！
（現場三個人裡面也是有兩個以為是要講創投，不過謎底揭曉後，大家興致更高昂了XD）</p>

<p>YuSen大大用最經典的費伯納西遞迴函式開始進行推導，經過curry等技巧的一番最佳化之後，
最後生成的是一個讓人看不懂的Y函式，還有分離出來費氏數列邏輯的函式。</p>

<h3><a href="http://storiii.com/player.html">詳細推導過程請見YuSen大大的網站投影片</a></h3>

<p>雖然Y combinator本身是經過層層推導出的結果，無法讓人一眼看懂，
不過可以將它理解成「遞迴引擎」。只要將邏輯傳進去，就可以利用它生成一個單一參數的遞迴函式。
這樣做的優點是可以減少撰寫遞迴函式犯錯的機會；另外更實用的，
我們可以透過改善Y遞迴函式引擎，讓所有使用它的函式得到加速的效果。</p>

<p>在投影片中Memorized Y的範例，藉由將Y導入快取機制來避開重複運算，達到神級的效能增益：
加速前<code>fib(50)</code>要耗時520秒；使用加速後的<code>fibM()</code>後，執行速度快到無法以毫秒單位估計，
直到‵fibM(1000)`才終於花了1毫秒，但是此時計算出的數值已經大到超越JS提供的精準度了！</p>

<!--
functor
functional composition?
-->

]]></content>
  </entry>
  
</feed>
