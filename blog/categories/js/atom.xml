<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JS | Orokana Pekoponjin]]></title>
  <link href="http://df1.github.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://df1.github.com/"/>
  <updated>2013-04-11T01:08:11+08:00</updated>
  <id>http://df1.github.com/</id>
  <author>
    <name><![CDATA[df1]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JS Group Taichung Meetup September 2012]]></title>
    <link href="http://df1.github.com/blog/2012/09/11/js-group-taichung-meetup-september-2012/"/>
    <updated>2012-09-11T14:39:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/09/11/js-group-taichung-meetup-september-2012</id>
    <content type="html"><![CDATA[<p>這次是<a href="http://javascript.tw">JS Group</a>在台中舉辦的第五次聚會。這個聚會除了每隔週在台北之外，通常選在每個月的第一個禮拜六下午會來到台中舉行。今天大家一樣是在老地方的水舞饌三樓，一起吃吃喝喝、coding、聊天。而這次的講者就是主辦的TonyQ大大。</p>

<p>TonyQ本身因為工作的關係，對jQuery等前端技術相當有經驗，所以大多分享還是會以jQuery為主。不過這個活動中大家討論的內容還是可以跳脫jQuery、跳脫library，廣泛地去討論所有JS或前端技術。今日主題就是網站裡很本質的要素：JS表單驗證、彈出式視窗。</p>

<p><img src="http://www.xapps.tw/files/node_image/52/js.png" alt="FB上的盛況XD" /></p>

<!--more-->


<p></p>

<h2>甚麼是表單驗證？</h2>

<p>以registrano報名表單為例：欄位分為必填、非必填。這就是最常見需要驗證的地方。表單驗證需要在兩個地方實作：</p>

<ol>
<li><p>送出前的內容：在前端驗證並提示使用者。</p></li>
<li><p>送出後在伺服器端的資料阻擋：這裡才是最主要的驗證地點，真正的防線。</p></li>
</ol>


<p>但是今天著重在前端表單驗證，目的是友善地導引使用者填好表單。（記得要友善導引喔，不要跳出「哈哈哈你看看你」這種意味不明的提示XD）</p>

<p>一般的表單都會有個<code>&lt;form&gt;</code>元素。我們可以用以下兩種作法來在submit之前做驗證：</p>

<p>把按鈕改成不是<code>action="submit"</code>，而是<code>onclick</code>時另外呼叫函式驗證後再真正去呼叫<code>form.submit()</code>
在submit的event做一些處理，如果失敗就終止submit。</p>

<pre><code>$('#register-form').on('submit', function(){
    var validated = validate();
    if(!validated){
        return false; //在jQuery中return false常常是終止該event
    }
});



function validate(){
    if($.trim($('person_name').val())==''){
        alert('請填寫姓名');
        $('person_name').focus();
        return false;
    }
    return true;
}
</code></pre>

<p>驗證日期格式也有兩招：
1.試著把他轉成Date物件</p>

<pre><code>if(new Date($('#date-field').val()))
</code></pre>

<p>2.用Regular Expression</p>

<pre><code>if(/[0-9]{4}\/[0-9]{1,2}\/[0-9]{1,2}/.test($('#date-field').val()))
</code></pre>

<p>不過大家都知道，表單驗證是很複雜的事，純粹用regular expression是做不到的；
再者，有多少欄位就要寫多少行的if clause，是一件很痛苦的事情。
以下舉了一些現成的表單驗證工具，看別人怎麼簡化這個東西。</p>

<h3><a href="http://jquery.bassistance.de/validate/demo/">jQuery Validation</a>：老字號(2006~2007就出現了)</h3>

<pre><code>&lt;input id="name" type="text" minlength="2" required&gt;
</code></pre>

<p>加上一些custom attribte後，它就會幫你檢查欄位、email驗證、URL驗證、若驗證不通過做highlight。</p>

<p>錯誤訊息的自訂：</p>

<pre><code>$(".selector").validate({
   rules: {
      name: "required",
      email: {
         required: true,
         email: true
      }
   },
   messages: {
      name: "Please specify your name",
      email: {
         required: "We need your email address to contact you",
         email: "Your email address must be in the format of name@domain.com"
      }
   }
});
</code></pre>

<p>看他怎麼驗證email：source code裡面有一個非常經典的驗證email的超級長regular expression：</p>

<pre><code>/^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i
</code></pre>

<p>jQuery Validation整體評價：很陽春、很好用</p>

<h3><a href="https://github.com/posabsolute/jQuery-Validation-Engine">jQuery Validation Engine</a></h3>

<p>簡單用法：</p>

<pre><code>&lt;input value="someone@nowhere.com" class="validate[required,custom[email]]" type="text" name="email" id="email" /&gt;
</code></pre>

<p>現在時代不一樣，他也提供了data-attribute的寫法：</p>

<pre><code>&lt;input type="email" name="email" id="email" data-validation-engine="validate[required,custom[email]]" data-errormessage-value-missing="Email is required!"  data-errormessage-custom-error="Let me give you a hint: someone@nowhere.com"    data-errormessage="This is the fall-back error message."/&gt;
</code></pre>

<h3>最後提供一些User Experience上的小叮嚀：</h3>

<p>錯誤訊息要讓user看得懂。
錯誤要一目瞭然，要避免讓user做try-and-error：改正之後才告訴user下一個錯誤。
驗證在前後端都要完整地去做。
送出之後把整個表單保留下來。
字數限制：字數超過不要阻擋使用者輸入，提示或送出前驗證即可。
最理想的驗證方式：輸入之後馬上告訴使用者對或錯、並提供auto complete。
題外話，如果時常因為辛苦填完表單因為驗證不通過被reset而感到挫折，可以試試這個瀏覽器附加元件：Form recovery (for firefox/chrome)XD</p>

<h3>小結</h3>

<p>常常會有十個以上的方法來解同一個問題。實務上，還是需要看需求及團隊skillset來調整實作方法。另外，表單驗證其實不限於有<code>&lt;form&gt;</code>的形式(如：FB社團加入成員功能，是由一個輸入框+按鈕構成的)</p>

<p>表單設計好書推薦：<a href="http://www.pcstore.com.tw/69book/M07276721.htm">「Web表單設計:點石成金的藝術」</a></p>

<h2>彈出式視窗</h2>

<p>彈出式視窗說穿了就是在有限的畫面內浮出一個區間：其他的不重要啦，讓專業的來！</p>

<ul>
<li><a href="http://leandrovieira.com/projects/jquery/lightbox/">jQuery</a> lightbox：最常見的選擇</li>
<li><a href="http://www.malsup.com/jquery/block/">Block UI</a></li>
<li>jQuery Alert：做簡單的提示或確認視窗</li>
</ul>


<p>這些彈出式視窗的技術原理都是利用很大的overlay遮在body上面，有透明度(<code>opacity:0.6;</code>)，固定位置(<code>position:fixed;</code>)。</p>

<p>但是，popup本身不是在overlay裡面(因為這樣child也會有透明度)；</p>

<p>而是使用很大的<code>z-index</code>讓他浮上來(所以網頁裡面元素的<code>z-index</code>請儘量設在100以內，不然可能會讓mask蓋不住它)。</p>

<p>特例：flash常常蓋不住怎麼辦？</p>

<p>flash屬性的<code>WMode</code>要改成<code>transparent</code>。</p>

<h3><code>window.alert</code>與<code>window.open</code>的迷思</h3>

<p>若使用JS下一般的alert，會讓整個JS會停下來等你。用上述popup及假alert是沒辦法做到這種synced的效果的。</p>

<p><code>window.open</code>會被瀏覽器封鎖彈出視窗，所以儘量不要用。但是如果是伴隨著click event，一般瀏覽器預設不會阻擋。不過還是「能不用就不用」。</p>

<p>如果是開同一個domain的URL，可以藉由指定target name來取得控制。</p>

<pre><code>window.test = window.open('about:blank','test');
</code></pre>

<p><code>window.open</code>時候會回傳一個window物件的reference。有window就會有document，有document就會有body，有body就可以改它裡面的東西。也就是說母視窗可以改子視窗。</p>

<p>反過來，小孩也可以看到父親：<code>window.opener</code>。所以小孩覺得自己被改了很不爽，也可以改他老爸！
(要小心跟<code>window.parent</code>搞混。<code>window.parent</code>拿到的是frame或iframe的parent window。不過這部分規格似乎有變動，連W3C目前都還是用<code>window.open</code>當範例)</p>

<p>還有一個特異功能不太有人知道，看起來很炫但是千萬不要亂用：用<code>window.opener.$</code>去拿它老爸的jQuery來用！如此一來，$的scope是在外面。如果裡面小孩真的要用，需要把小孩自己的<code>document</code>傳進去：</p>

<pre><code>window.opener.$(document).find('body')[0];
</code></pre>

<p>有種情境適合這樣做：發文章的預覽功能</p>

<p>雖然看起來子母視窗可以互通有無是很炫的事情，但是他們記憶體也可以互通有無。</p>

<p>所有的瀏覽器(包含IE6)都可以這樣做，不過policy還是同網域才可以用<code>window.opener</code>。<code>window.opener.$(document).find('body')[0];</code></p>

<p>有種情境適合這樣做：發文章的預覽功能</p>

<p>雖然看起來子母視窗可以互通有無是很炫的事情，但是他們記憶體也可以互通有無。</p>

<p>所有的瀏覽器(包含IE6)都可以這樣做，不過policy還是同網域才可以用<code>window.opener</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sencha Architect 2快速上手Ext JS 4.1]]></title>
    <link href="http://df1.github.com/blog/2012/04/23/get-started-with-ext-js-4-1-using-sencha-architect-2/"/>
    <updated>2012-04-23T23:17:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/04/23/get-started-with-ext-js-4-1-using-sencha-architect-2</id>
    <content type="html"><![CDATA[<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/architect.png"></p>

<p><del>號外！所有美工（Designer）可以就地升級為架構師（Architect）！</del>（梗等下講）
Sencha在今天釋出了Ext JS 4.1版本。這篇文章將以新手的角度，加上最新工具的輔助，讓你立刻懂得如何踏上Ext JS學習之路，並快速開發一個Web Application的前端介面。（此文章也有PO在ITHome）</p>

<!--more-->


<h2>Ext JS是啥</h2>

<p>首先簡單介紹一下Ext JS好了。不知道大家有沒有用過<a href="http://miroko.tw">miroko</a>？他是N年前我<del>跟水利系室友</del>非常愛用的免費服務，可以幫你掛BT並存到他所提供的網路硬碟空間內，對學術網路頻寬超級大，一秒可以衝到5~10Mb。（但是自從開始收費就跟它再會了） 它那種淡藍色UI，就是使用當時剛推出的Ext JS 1.0刻的。還是沒啥畫面嗎？<a href="http://www.freegroup.org/2009/06/free-online-storage-miroko/">這裡有真相</a>。</p>

<h3>進入正題前，<a href="http://dev.sencha.com/deploy/ext-4.1.0-gpl/examples/">先看看官方提供的範例長怎樣吧！</a></h3>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/feed.png" title="&#34;官方的範例之一：Feed Viewer，阿就藍藍的，非常的『2007』&#34;" alt="&#34;官方的範例之一：Feed Viewer，阿就藍藍的，非常的『2007』&#34;"></p>

<p>簡而言之，Ext JS是<a href="http://www.sencha.com">Sencha</a>公司推出的一個純JS的Web前端框架，提供一般Web App會用到的UI元件（按鈕、表格、Tab…）讓你實作出想要的user flow；且便於繼承擴充，定義出自己客製的元件；另外也提供許多好用的JS utility及Ajax Data Source支援，跟後端CRUD做完美的配合。在外觀上，預設主題是簡單但有點過時的淡藍色，不過他的主題是以SASS/Compass實作，因此只要找對美工（<del>還看別人！？就是你！</del>），也是可以盡情揮灑的。目前它大多應用於企業端的內部Web Application based的資訊系統（至少敝公司將它視為UI標準之一orz，另外不知道為啥，在大陸跟日本的開發者社群似乎都相當發達）。我個人認為它的優點在於良好的繼承架構、便於快速開發及擴充，還有完整豐富的社群、官方支援及API（用商業化套件的好處就在於任何奇怪、無恥的問題只要PO個版就有解，瀏覽器相容等問題都不用自己去搞，也不會叫你RTFM）；但是相對的，跟jQuery+jQuery UI的方便性比起來，它的缺點是架構較為固定，很難去把它的架構翻掉自己重新設計；另外最重要的，它在某些情況可能<strong>要錢</strong>。</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/kitchensink.png" title="&#34;Ext JS 4.1 提供的Nepune主題&#34;" alt="&#34;Ext JS 4.1 提供的Nepune主題&#34;"></p>

<h3>授權</h3>

<p>其實寫這篇文章真的有點掙扎，因為真的像是業配文orz。還是先來講講<a href="http://www.sencha.com/products/extjs/license/">授權</a>的部分：<a href="http://www.sencha.com/products/extcore">Ext Core</a>是Ext JS的核心，提供類似於jQuery的DOM操作等功能，是免費的且使用<a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a>；打個比方：Ext Core之於Ext JS，就如同jQuery之於jQuery UI。雖然Ext JS也算是開源的，但它的授權就比較複雜。如果也是用於open source開發，則適用<a href="http://www.gnu.org/copyleft/gpl.html">GPLv3</a>；如果是商業用途且將原始碼視為公司proprietary，則適用<a href="http://www.sencha.com/legal/sencha-commercial-software-license-agreement/">Sencha Commercial License</a>；如果是要把它做成另外的商業化SDK（如<a href="http://www.ext.net/">Ext.NET</a>），Sencha也提供OEM License。而今天要講的Sencha Architect，則是Sencha推出的架構設計工具，<a href="http://www.sencha.com/products/architect/license/">一套要價$399鎂</a>，但提供免費試用。</p>

<h2>開始使用Sencha Architect做第一個Ext JS的UI</h2>

<p>進入正題，前幾天Sencha發表了最新的Sencha Architect 2 （梗在這，因為它以前叫Ext Designer，現在升級變Architect XD）。它是一個強大的東西，只要拉一拉、摳一摳，十分鐘就可以把UI刻好了。除了拉UI之外，它之所以會改名為Architect，是因為它可以直接在裡面寫code、做event handling、甚至定義MVC架構。（另外一大賣點是可以開發Sencha Touch當成手機App，但是本周主題是Web App，所以就不提這段XD）這篇文也不會涉獵到太深的架構部分，目標先設定在快速上手並做出一個會動的Web UI。話不多說，讓我們開始吧（羞）</p>

<p><strong>PS. 按圖片都可以放大</strong></p>

<h3>下載並安裝</h3>

<p><a href="http://www.sencha.com/products/architect/">載點在此</a>，試用前須註冊<a href="http://www.sencha.com/forum/">Sencha Forum</a>的帳號。它本身是以QT及其內建Webkit寫成的跨平台程式，可以在Windows/MacOS/Linux上執行。將程式打開之後，可以看到一個很熟悉的WYSIWYG所見及所得編輯器：左邊是工具箱、中間是畫布、右上是階層圖、右下是一欄欄的屬性。</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/wysiwyg.png" title="&#34;Sencha Architect跑起來的樣子&#34;" alt="&#34;Sencha Architect跑起來的樣子&#34;"></p>

<h3>開始拉UI</h3>

<p>迫不及待要從左邊拉東西進來了吧？首先，身為一個web app，會需要的是一個<code>viewport</code>。它可以把整個網頁的畫面撐開，讓我們在裡面做layout。
<img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/viewport.png" title="&#34;把整個Web App畫面撐開的東西是Viewport&#34;" alt="&#34;把整個Web App畫面撐開的東西是Viewport&#34;"></p>

<p>繼續瘋狂拉東西進來之前，還是要先對Ext JS所提供的各種layout有基本的認識。這個<a href="http://dev.sencha.com/deploy/ext-4.1.0-gpl/examples/layout-browser/layout-browser.html">Ext Layout Browser</a>裡面有各種layout的DEMO及基本介紹。一般來說，我們常常在web app的最外面使用Border Layout，將畫面分成東南西北中<del>發板</del>幾塊（region）。</p>

<p>要設定這個viewport的layout類型，可以在右邊屬性中找到layout下拉選取，或是在畫布上的藍色齒輪跳出的快速設定popup中選取。接下來真的就可以從左邊亂拉元件了。要注意的是，若是在一個border layout的container裡面，它需要有一個<code>region: 'center'</code>   （中央）的子元件；其他東西南北則不一定要有。<a href="http://dev.sencha.com/deploy/ext-4.1.0-gpl/examples/layout/complex.html">拉完之後可能長這樣</a>。</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/region.png" title="&#34;Border Layout的示意圖，紅色框起來的地方套用了border layout&#34;" alt="&#34;Border Layout的示意圖，紅色框起來的地方套用了border layout&#34;"></p>

<p>以下面的圖為例，我西邊放了一個<code>Tree Panel</code>，將它的<code>collapsible</code>（可收合）及<code>split</code>（邊緣分割線）屬性設為<code>true</code>；中間則放了一個包含三個tab的<code>Tab Panel</code>。在第一個Tab，我將它的layout設為absolute，這時候畫面上會出現格線方便我們直接拖拉調整子元件的位置。若要將表單欄位貼到最右邊，可以將<code>anchor</code>屬性設為100%。</p>

<p>在我們拉表單的時候，可以在畫布上的元件按右鍵使用duplicate功能快速複製；複製後可用transform將其轉為其他類別的元件（如：將combo box下拉選單欄位轉為date field日期欄位。它們都是繼承<code>Ext.form.field.Base</code>）。</p>

<h3>看看內建的API文件</h3>

<p>Sencha Architect的一大優點就是它本身整合了Ext的documentation，大幅減少了設計時翻文件的痛苦。如下圖，在左邊的工具箱中點每個元件後，下方都會出現簡單說明；另外，在屬性視窗中的每個屬性旁都有一個問號，滑鼠移上去也會秀出簡單說明。若是想看完整的document，也可以點連結直接跳到線上API去看。
<img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/api.png" title="&#34;Sencha Architect中內建的documentation功能&#34;" alt="&#34;Sencha Architect中內建的documentation功能&#34;"></p>

<h3><a href="http://docs.sencha.com/ext-js/4-1/">看看很好很強大的線上API文件吧！</a></h3>

<p>Ext的原始碼本身是以JS Doc形式做self-documentation的。Sencha也開發了一個工具叫JS Duck將原始碼直接變成像這樣的API網站。裡面可以看到它提供所有的功能，元件Class的繼承hierarchy，還有範例以及別人的評論。這裡面真的很值得探索！</p>

<h3>事件處理</h3>

<p>若是我想讓user按按鈕之後，將左邊的tree收起來，該怎麼做？（例子很爛請包涵XD）
首先我們先將左邊的tree panel取一個ID叫<code>myTreePanel</code>。有了ID之後，在任何地方都可以使用<code>Ext.getCmp('元件ID')</code>來取得該元件，並進行操作。（題外話，當然這不是唯一方法。若是熟悉CSS selector，也可以用類似jQuery的方法來取得元件，如<code>query</code>、<code>up</code>、<code>down</code>等等。這種寫法相當適合controller使用。）</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/id.png" title="&#34;給咱們Tree panel一個ID&#34;" alt="&#34;給咱們Tree panel一個ID&#34;"></p>

<p>接下來，在button的屬性視窗中加入一個event handler如下圖。一個按鈕所有可能觸發的event全部在下拉選單列給我們看了！很直覺地，click應該就是我們要的（通常試試看就知道是不是我們要的了）。
<img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/event.png" title="&#34;給button加一個click的event&#34;" alt="&#34;給button加一個click的event&#34;"></p>

<p>然後就可以開始寫code了！這一行是利用剛剛設定的ID來拿到左邊的tree，並將它收合。
<img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/code.png" title="&#34;將左邊的tree收合&#34;" alt="&#34;將左邊的tree收合&#34;">
簡單吧！到這邊已經可以lay出複雜且會動的UI了！</p>

<h3>Data Model與Store</h3>

<p>在企業的web application中，前端需要的資料大多從後端DB過來。只要是有『吃資料』的元件，都需指定一個store給它，裡面存有前端畫面需要的所有資料。在store裡面需定義該store所需要存取的欄位（可以直接在store的fields屬性中定義欄位，也可以指定一個定義好的Data Model給它。）。以combo box（下拉選單）為例，它通常需要兩個欄位：顯示文字與實際值。</p>

<p>依照與後端溝通的方式，Ext提供了各種不同的proxy供store使用。另外根據回傳的資料形式不同，也提供了不同的reader供proxy使用。像我最常用的應該是Ajax Proxy搭配Json Reader。舉例來說，若是我們要做一個性別的選單，而資料由後端某個URL傳回來的Json格式如下：</p>

<pre><code>{
    "total": 2,
    "data": [
        {"gender": "M", "genderText": "男性"},
        {"gender": "F", "genderText": "女性"}
    ]
}
</code></pre>

<p>則需在store新增兩個field：<code>gender</code>和<code>genderText</code>；在proxy的<code>url</code>打上該URL；在reader的<code>root</code>屬性設成<code>"data"</code>（請看上面的json，我們要的資料是在data裡面）。</p>

<p>我知道這又是個爛例子，因為性別其實hard-code就好了XD。下圖是hard-code的combo box store作法：
建立一個Json Store，在field內加兩個欄位；在data裡面hard-code我們的資料；將proxy砍掉。</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/store.jpg" title="&#34;Store裡的設定&#34;" alt="&#34;Store裡的設定&#34;"></p>

<p>Combo box部分，將store指向上面定義的MyJsonStore；將<code>displayField</code>跟<code>valueField</code>分別設成我們的顯示文字與實際值欄位名；將<code>queryMode</code>設成<code>"local"</code>（若設成remote，當user在combo box敲字篩選時，會在url後面加上?query=xxx然後去問後端，方便後端做篩選處理）。</p>

<p><img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/combo.jpg" title="&#34;Combo box裡的設定&#34;" alt="&#34;Combo box裡的設定&#34;"></p>

<h3>佈署到local並預覽</h3>

<p>剛看到Sencha Architect畫面時，一定會想試試看preview跟deploy按鈕到底是在做啥。其實也沒啥，就是幫我們deploy到web server再開啟瀏覽器預覽。須先在settings設定路徑如下圖。另外建議將Ext JS Path改成4.1的<code>http://extjs.cachefly.net/ext-4.1.0-gpl/</code>。
<img src="/attachments/2012-04-23-get-started-with-ext-js-4-1-using-sencha-architect-2/settings.png" title="&#34;專案設定畫面&#34;" alt="&#34;專案設定畫面&#34;"></p>

<h2>Application及MVC架構</h2>

<p>雖然這超出本文涵蓋的主題，但還是稍微談一下好了。當Web App規模大到一定程度時，想必會開始思考如何組織程式碼，讓它可讀性變高，還有方便maintain、動態載入及效能等等架構面的問題。若是有看過backbone.js、require.js、knockout.js等工具的介紹文，應該會對現在流行的架構概念有所認識。其實Ext JS也有它自己類似AMD的機制；如果要做類似backbone的hash routing，也可以透過<code>Ext.history</code>（但它還是用hidden iframe囧 要支援舊瀏覽器沒辦法）；最重要的，它的MVC架構設計也是相當優秀，值得另開專文深入討論之。若想瞭解，可以參考<a href="http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture">這篇官方介紹</a>。看完之後，相信會迫不及待地從左邊工具箱拖出controller來玩玩看吧！</p>

<h3>好文分享</h3>

<ul>
<li><a href="http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture">Ext JS 4的Application/MVC架構概觀</a></li>
<li><a href="http://www.sencha.com/blog/deftjs-loosely-coupled-mvc-through-dependency-injection">Deft JS: Loosely Coupled MVC through Dependency Injection</a> -- John Yanarella
下面這幾個archticture tool相關文章也非常值得看看，但跟Ext沒關係</li>
<li><a href="http://speakerdeck.com/u/jaceju/p/backbonejs-x-requirejs-quick-guide">Backbone.js X RequireJS Quick Guide</a> -- 大澤木小鐵</li>
<li>介紹Knockout.js的MVVM：<a href="http://addyosmani.com/blog/understanding-mvvm-a-guide-for-javascript-developers/">Understanding MVVM – A Guide For JavaScript Developers</a> -- Addy Osmani</li>
</ul>


<h2>整合後端開發</h2>

<p>在瞭解他匯出的行為之後，就會發現其實很容易跟後端開發的專案進行整合。其中會遇到的一個問題就是他跑AMD動態載入JS Class時的路徑是否跟專案中的目錄架構是一樣的，這時候就要對<code>Ext.application</code>中的<code>appFolder</code>屬性做調整。<a href="http://df1.github.com/blog/2012/02/16/integrate-ext-designer-with-java-web-project-in-eclipse/">我去年的一篇文章</a>是以Java EE的Web project為例，將Ext Designer 1.2整合Eclipse進行開發。印象中當時主要的技術堆疊大略是（純回憶，僅供參考）：前後端以REST進行溝通（JAX-RS）；Servlet及JAVA部分採用Spring來做DI及AOP；ORM使用JPA 2；local測試環境使用<a href="http://code.google.com/p/run-jetty-run/">run-jetty-run</a>。</p>

<h3>好文分享</h3>

<ul>
<li><a href="http://docs.sencha.com/ext-js/4-1/#!/guide/editable_grid">Node.js+mongodb+EditGrid範例</a></li>
</ul>


<h2>IE8效能問題</h2>

<p>這年頭很多人都愛用Firefox或Chrome進行開發，但是很遺憾的，咱們user可沒那麼先進。更令人沮喪的是Ext JS 4.0至4.0.7版本在IE8以下都有嚴重的效能問題。Sencha的解釋如下：</p>

<blockquote><p>  Ext JS 4 features a brand new rendering pipeline that is significantly more structured and extensible than the rendering process in Ext JS 3. All Components now render the same way, and are driven by XTemplates. They also follow a common hook point regime, enabling the framework and developers to extend or hook into the render process for each Component.</p>

<p>  While the new rendering architecture is a big step forward, it did create slow performance in some cases. In 4.0.1 and before the order of operations in the rendering process was not as efficient as it could have been, resulting in many more DOM updates than are actually needed. In 4.0.2 we have corrected this behavior, yielding significant render speed improvements.</p>

<p>  We have already identified further optimizations to the rendering pipeline that will be incorporated into Ext JS 4.0.3 and beyond. Performance is very important to all of us and making the framework as fast as we know it can be will remain a top priority for the team.</p></blockquote>

<p>因此這次公開的4.1版主要就是focus在解決在IE的效能問題，現在已經有改善許多。 但是，在開發期間，良心建議您偶爾還是把IE開來跑跑看，免得像小弟當初一樣，發現時已經距<del>引咎辭職</del>上線的日子不遠矣！</p>

<h2>參考連結</h2>

<ul>
<li><a href="http://www.sencha.com/products/extjs/">Ext JS官網</a></li>
<li><a href="http://www.sencha.com/products/architect/">Sencha Architect</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[網摘分享：jQuery到底是何方神聖？別怕，將他打回原形！]]></title>
    <link href="http://df1.github.com/blog/2012/04/09/jquery-striptease/"/>
    <updated>2012-04-09T23:17:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/04/09/jquery-striptease</id>
    <content type="html"><![CDATA[<p>（此文章參加<a href="http://ithelp.ithome.com.tw/js-ninja/">JavaScript忍之道</a>的『網摘分享』活動）</p>

<p>不知道當大家第一次聽到jQuery這個詞時，在心中浮現的第一個畫面是什麼？
是一個Java-base的query language？是一個java寫成的搜尋引擎？<del>還是一位超萌的小羅莉？（好像還沒人把它擬人化XD）</del></p>

<p>無論你聽見它芳名時候的第一印象為何，當你真正見到它的容貌時，想必心中那種悸動到現在還是難以忘懷吧！讓我們再來回顧一下：</p>

<!--more-->


<p><code>$("p.neat").addClass("ohmy").show("slow");</code></p>

<p>如果場景是企業的主管正抉擇是否導入jQuery的當下，看到第一個字是大大的<code>$</code>時，心中立即的疑問就是『那這套solution的license要多少錢？』
這時，你就會非常自信專業地答道
『老闆，jQuery是不用錢的啊！只要在<code>$</code>括號裡面打上您想選擇的條件，傳回來的就是<strong>jQuery物件</strong>。選出來之後，您想要對它做啥都不成問題！』</p>

<br/>


<p>沒錯，你想把它抓去阿魯巴都可以。（請自己寫plugin）</p>

<br/> 


<p>但問題來了，jQuery物件到底是啥？為啥它可以用<code>$</code>？為啥可以像上面那樣一直串下去？為啥它可以那麼強大？</p>

<h3>青菜底家啦</h3>

<p>這時候，就要看對岸同胞的原始碼解析了－－<a href="http://xiaofei85390656-163-com.iteye.com/blog/1449221">jQuery1.7系列一：jQuery 對象的實質</a></p>

<p>裡面將整個jQuery的最外圍架構拿出來討論。除了可以找到上面那些問題的解答之外，他也提到了jQuery作者使用的一些小trick
（browser不支援<code>undefined</code>？沒關係，啥都不要傳進去就是了…之類的）；另外也讓我們了解jQuery plugin的撰寫原理。</p>

<p>如果對文章中提到的<code>閉包（closure）</code>有看沒有懂，
可以參考TonyQ（Ptt soft_job版主）在javascript.tw聚會中對closure相關的變數scope常見問題說明。
影片後半段也對jQuery的原始碼做了解析，是講<strong>繁體中文</strong>的喔！（咦） 看影片吧！</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/KxItux9ZeA8?rel=0" frameborder="0" allowfullscreen></iframe>


<h2>參考連結</h2>

<ul>
<li><a href="http://xiaofei85390656-163-com.iteye.com/blog/1449221">jQuery1.7系列一：jQuery 對象的實質</a>（簡） - 晨曦的朝陽</li>
<li><a href="http://jquery.com/">jQuery官網</a></li>
<li><a href="http://ithelp.ithome.com.tw/js-ninja/">JavaScript忍之道</a></li>
<li><a href="http://js-tw.blogspot.com/">JavaScript.tw</a>及其<a href="https://www.facebook.com/groups/javascript.tw/">FB社團</a>（biweekly JS小聚）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web-based Slideshows --Comparing impress.js, jmpress.js and reveal.js]]></title>
    <link href="http://df1.github.com/blog/2012/03/27/web-based-slideshows-comparing-impress-js-jmpress-js-reveal-js-with-prezi/"/>
    <updated>2012-03-27T13:17:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/03/27/web-based-slideshows-comparing-impress-js-jmpress-js-reveal-js-with-prezi</id>
    <content type="html"><![CDATA[<p>The story began when I was assigned with a jQuery sharing topic. Just few days before I heard the <strike><span style="color: #cccccc;">bad</span></strike> news, several cool web-slide things like <a href="http://bartaz.github.com/impress.js">impress.js</a>, <a href="http://shama.github.com/jmpress.js">jmpress.js</a> and <a href="http://lab.hakim.se/reveal-js/">reveal.js</a>&nbsp;ran across my screen. "Why not give it a crack?" said them. And I decided to try impress.js out.<br /></p>

<br />


<div class="separator" style="clear: both; text-align: center;">
<span id="goog_724297899"></span><span id="goog_724297900"></span><a href="http://www.blogger.com/"></a>
</div>


<p>Here is my brief comparison, with one of their competitors -- Prezi:<br /></p>

<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse;">
<tbody>
<tr style="background: #CCCCCC;">
  <td style="text-align: left;" width="80"></td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
Prezi</div>
</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
impress.js/jmpress.js</div>
</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
reveal.js</div>
</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Technology</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
Flash</div>
</div>
</td>
  <td colspan="2"><div style="text-align: center;">
<div style="text-align: left;">
CSS3 + JS</div>
</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Characteristic</div>
</td>
  <td colspan="2"><div style="text-align: center;">
<div style="text-align: left;">
zoom-in/out to give an overview to audience</div>
</div>
</td>
  <td><div style="text-align: left;">
provides more PowerPoint-like characteristics, also with the "basement slide"</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Presentation Usability</div>
</td>
  <td><div style="text-align: left;">
mouse-scroll to zoom, drag to tilt</div>
</td>
  <td><div style="text-align: left;">
mouse-scrolling/dragging do nothing</div>
</td>
  <td><div style="text-align: left;">
the brand new 4-direction browsing</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
To jump to some page</div>
</td>
  <td><div style="text-align: left;">
zoom out and out, and click on your destination slide once you can see it</div>
</td>
  <td><div style="text-align: left;">
"URL hash" shows the ID of your page. Can be&nbsp;</div>
</td>
  <td><div style="text-align: left;">
Can be linked</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Design Usability</div>
</td>
  <td><div style="text-align: left;">
Very friendly UI with its prevailing "<a href="http://prezi.com/learn/transformation-zebra-move-scale-rotate/">Zebra</a>"</div>
</td>
  <td colspan="2"><div style="text-align: left;">
You must have HTML skill! <font color="red">(Update 04/18: Not now, see [this][impressionist] for impress.js)</font></div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Extensibility</div>
</td>
  <td><div style="text-align: left;">
Constrained by its OOTB themes. However you can still insert your own SWF/PDF/youtube</div>
</td>
  <td colspan="2"><div style="text-align: left;">
You can insert whatever you can insert in a web page!</div>
</td>
</tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Community</div>
</td>
  <td style="text-align: center;"><div style="text-align: left;">
Quite a few</div>
</td>
  <td colspan="2" style="text-align: center;"><div style="text-align: left;">
No community (or does github count?)</div>
</td>
</tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Compatibility</div>
</td>
  <td><div style="text-align: left;">
iOS does not play flash. Though there's iPad version, I worry about my inserted SWFs and PDFs.</div>
</td>
  <td colspan="2"><div style="text-align: left;">
How would you doubt the perfect HTML+CSS+JS combo? Except the bad compatibility in old browsers.</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
3D</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
N/A</div>
</div>
</td>
  <td><div style="text-align: left;">
all x-y-z position/rotation can be defined</div>
</td>
  <td><div style="text-align: left;">
3D transition</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;"><div style="text-align: left;">
Pricing</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
freemium</div>
</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
free</div>
</div>
</td>
  <td><div style="text-align: center;">
<div style="text-align: left;">
free</div>
</div>
</td>
 </tr>
</tbody></table>


<br />


<br />


<h2>Related Links</h2>

<ul>
<li><a href="http://tutorialzine.com/2012/02/css3-product-showcase/">Making an Impressive Product Showcase with CSS3</a> - tutorialzine</li>
<li>(updated 2012/04/05) <a href="http://tympanus.net/codrops/2012/04/05/slideshow-with-jmpress-js/">SLIDESHOW WITH JMPRESS.JS</a> - codrops</li>
<li>(updated 2012/04/18) Impressionist -- <a href="https://github.com/hsivaramx/Impressionist">Online Visual Editing Tool</a> for Impress.js (latest: <a href="http://www.hsivaram.com/impressionist/alpha3/">Alpha3</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[酷炫的web投影片：impress/jmpress.js與reveal.js]]></title>
    <link href="http://df1.github.com/blog/2012/03/25/cool-web-slides-impress-js-jmpress-js-reveal-js/"/>
    <updated>2012-03-25T13:17:00+08:00</updated>
    <id>http://df1.github.com/blog/2012/03/25/cool-web-slides-impress-js-jmpress-js-reveal-js</id>
    <content type="html"><![CDATA[<p>一年多前，咱們team用了一個flash-base的簡報工具－－<a href="http://www.prezi.com/" target="_blank">Prezi</a>，
向老闆報告某雲端應用的讀書會sharing。那是個多麼美好的時光，也是多麼糟糕的時光阿(遠目)<br /></p>

<br />


<p>Prezi的概念就是：畫布是無限大的，你可以定義每個頁面的框在畫布的哪個位置、大小；播放時候會以zoom-in/out的形式，可以帶給觀眾在單一個主題上overview與微觀的整體層次感。當初令我印象最深刻的就是某個prezi實習生做的<a href="http://prezi.com/xcit4zbat6sw/sweet-recipe-to-solving-problems/" target="_blank">Sweet recipe to solving problems</a>(真的是Epic！)。如今Prezi的知名度應該已經有相當程度的提升，也讓我跌破眼鏡的開始支援了iPad（應該是開發了flash轉CSS3？我沒iPad所以不確定）。如果還沒體驗過的話，可以直接去
<a href="http://www.prezi.com/" target="_blank">Prezi</a>&nbsp;上逛逛別人做好的，個個都是熱情奔放、創意無限！<br /></p>

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody>
<tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-HFX5DC8Bf-I/T28aRi34DXI/AAAAAAAABkM/APfd36gK0RU/s1600/2012-03-25+21-14-11.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="224" src="http://1.bp.blogspot.com/-HFX5DC8Bf-I/T28aRi34DXI/AAAAAAAABkM/APfd36gK0RU/s320/2012-03-25+21-14-11.png" width="320" /></a></td></tr>
<tr><td class="tr-caption" style="text-align: center;">Prezi的播放介面</td></tr>
</tbody></table>


<br />


<div style="text-align: left;">
最近，手上又有個關於jQuery的sharing topic。剛好在開始準備的前幾天，我看到了讓我眼睛一亮的玩意－－<a href="http://bartaz.github.com/impress.js">impress.js</a>、<a href="http://shama.github.com/jmpress.js">jmpress.js</a>和<a href="http://lab.hakim.se/reveal-js/">reveal.js</a>。因為剛好需要對jQuery的功能做live demo，如果能在slide上面就直接辦到，這是多麼美妙的一件事啊！當然是先用再說囉。</div>


<br />


<table align="center" cellpadding="3" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody>
<tr>

<td style="text-align: center;"><a href="http://bartaz.github.com/impress.js" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="150" src="http://2.bp.blogspot.com/-CcKU5md9xbE/T28aCDgXDyI/AAAAAAAABkE/esPzJ5B-BRo/s320/2012-03-25+20-27-26.png" /></a></td>

<td style="text-align: center;"><a href="http://shama.github.com/jmpress.js" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="150" src="http://4.bp.blogspot.com/-JcFoEZWAFaA/T3B8DM7UAeI/AAAAAAAABkk/BFV4kDSv54s/s320/2012-03-26+22-20-42.png" /></a></td>

<td style="text-align: center;"><a href="http://lab.hakim.se/reveal-js/"><img border="0" height="150" src="http://2.bp.blogspot.com/-0YfuivlNJ04/T28aA7LvzwI/AAAAAAAABj8/0Qu3IObTUs0/s320/2012-03-25+20-27-55.png" style="margin-left: auto; margin-right: auto;" /></a></td></tr>
</tbody></table>


<div class="separator" style="clear: both; text-align: center;">
<span id="goog_724297899"></span><span id="goog_724297900"></span><a href="http://www.blogger.com/"></a>
</div>


<br />


<p>它們都是以CSS3+JS為主的技術來實現web投影片播放：impress.js簡單的說就是100%向prezi致敬（官網承認的），將整個無限畫布的概念<strike><span style="color: #999999;">抄</span></strike>承襲了下來；jmpress.js則是繼續<strike><span style="color: #999999;">抄</span></strike>承襲了impress.js， 加入了jQuery/jQuery UI，強調他不只可以當作投影片，更可以拿來當成網站用；reveal.js則是比較不玩這麼fancy的東西，只提供3種轉場效果&amp;程式碼自動上色，整體播放下來的體驗會比較像PowerPoint或Keynote。比較炫的就是除了←→換頁外，還可以使用↑↓方向鍵來進入一張投影片的「地下室」（這樣講有點抽象，直接<a href="http://lab.hakim.se/reveal-js/">去玩玩看</a>就知道啦XD）<br /></p>

<br />


<br />


<p>於是，我當然是挑了比較酷炫的impress.js來試試看（為什麼要demo jQuery卻不用jmpress.js呢？因為我做完才發現有它的存在orz）。</p>

<br />


<p>最後，來個小小的比較（個人意見）：<br /></p>

<br />


<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse;">
<tbody>
<tr style="background: #CCCCCC;">
  <td width="80"></td>
  <td><div style="text-align: center;">
Prezi</div>
</td>
  <td><div style="text-align: center;">
impress.js/jmpress.js</div>
</td>
  <td><div style="text-align: center;">
reveal.js</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">使用技術</td>
  <td><div style="text-align: center;">
Flash</div>
</td>
  <td colspan="2"><div style="text-align: center;">
CSS3 + JS</div>
</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">簡報特性</td>
  <td colspan="2"><div style="text-align: center;">
以zoom-in/out的形式，帶給觀眾整體感</div>
</td>
  <td>提供較多如PowerPoint簡報特性的功能，並提供「地下室」</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">操作性</td>
  <td>可隨時使用滑鼠滾輪自由放大縮小；可自由拖移畫布位置</td>
  <td>無法使用滾輪、拖移</td>
  <td>四向方向鍵的創新模式</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">跳頁方便性(跳到很遠的投影片)</td>
  <td>須用滾輪縮小後，點選該投影片方可跳至該頁</td>
  <td>在URL上的#號(hash)後面會顯示該頁面ID。可以直接在網址列上修改ID跳至想要的頁面，也可以自己加上其他投影片的連結；可以用瀏覽器的上一頁/下一頁/瀏覽歷程等操作</td>
  <td>可在頁面上自己加連結，但是一般跳頁時不會更新hash，所以重新整理之後投影片會跑掉，也不能用上一頁/下一頁</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">製作難度</td>
  <td>提供功能相當完整的設計介面，可方便地編輯整個大畫布。他主打的「<a href="http://prezi.com/learn/transformation-zebra-move-scale-rotate/">斑馬環</a>」(移動/旋轉/放大縮小工具，就是prezi的logo那個圓形怪怪的東西)也是此介面的一大特色</td>
  <td colspan="2">需有HTML基礎方能看懂其原理。目前入門的門檻相對高很多。(如：一個&lt;div
  class=”slide”&gt;&lt;/div&gt;為一張投影片)<font color="red">(4/18更新：已經有人製作impress線上編輯工具)</font></td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">擴充性</td>
  <td>被內建的主題限制而無法自訂字型顏色等基本屬性。但可以自行匯入flash(swf)、PDF、圖片等資源(上面提到的recipe範例就是插入了一個龐大的flash)</td>
  <td colspan="2">只要是在網頁上可以插入的東西都可以加進來！ (要多有彈性就多有彈性，但是相對的就沒有一個良好的擴充架構)</td>
</tr>
<tr>
  <td style="background: #CCCCCC;">社群/網路資源</td>
  <td style="text-align: center;">相當豐富</td>
  <td colspan="2" style="text-align: center;">無社群 (github算嗎XD)</td>
</tr>
<tr>
  <td style="background: #CCCCCC;">相容性</td>
  <td>Flash不相容於iOS。雖然有推出iPad版本，但所插入的flash、PDF等元件應該凶多吉少</td>
  <td colspan="2">HTML+CSS+JS是未來的web標準技術。唯對舊版瀏覽器相容性仍較差</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">3D特效</td>
  <td><div style="text-align: center;">
目前無提供</div>
</td>
  <td>可以指定傾角、xyz軸位置等，做出很酷炫的3D效果</td>
  <td>轉場時有3D特效</td>
 </tr>
<tr>
  <td style="background: #CCCCCC;">收費</td>
  <td><div style="text-align: center;">
freemium模式</div>
</td>
  <td><div style="text-align: center;">
免費</div>
</td>
  <td><div style="text-align: center;">
免費</div>
</td>
 </tr>
</tbody></table>


<br />


<p>現在CSS跟JS的技術都有爆炸性的成長，其實還有很多更酷炫的方式來呈現簡報(如parallax scrolling的：<a href="http://layrr.com/">layrr</a>、<a href="http://www.nike.com/jumpman23/aj2012/">Nike AJ球鞋網頁</a>等等)。但是真的就流於網頁程式設計苦工了，需要評估有沒有值那個成本。</p>

<p>喜歡嗎？去fork一個你的Limpress.js吧XD！ (趕風潮XD)</p>

<h2>延伸閱讀</h2>

<ul>
<li><a href="http://tutorialzine.com/2012/02/css3-product-showcase/">用impress.js製作產品展示網站</a> - tutorialzine（大推此站）</li>
<li>（2012/04/05更新）<a href="http://tympanus.net/codrops/2012/04/05/slideshow-with-jmpress-js/">使用jmpress.js製作商品展示網站</a> - codrops</li>
<li>（2012/04/18更新）Impressionist -- Impress.js的<a href="https://github.com/hsivaramx/Impressionist">線上編輯工具</a>（目前版本<a href="http://www.hsivaram.com/impressionist/alpha3/">Alpha3</a>）</li>
</ul>

]]></content>
  </entry>
  
</feed>
